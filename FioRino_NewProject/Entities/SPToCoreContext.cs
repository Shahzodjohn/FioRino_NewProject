
///
/// generated by SPToCore on 12/14/2021 15:36:08
///

using System;
using System.Data;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using FioRino_NewProject.Data;

namespace FioRino_NewProject.Model
{
    public partial class SPToCoreContext : FioRinoBaseContext
    {
        private DbSet<EXPOSE_dm_DownloadingStatus_LoadingProcessResult> EXPOSE_dm_DownloadingStatus_LoadingProcess { get; set; }
        private DbSet<EXPOSE_dm_DownloadingStatus_SuccessDateResult> EXPOSE_dm_DownloadingStatus_SuccessDate { get; set; }
        private DbSet<EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult> EXPOSE_dm_OrderProducts_DetailProductListStanMagazynu { get; set; }
        private DbSet<EXPOSE_dm_OrderProducts_GetOrderDetailResult> EXPOSE_dm_OrderProducts_GetOrderDetail { get; set; }
        private DbSet<EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult> EXPOSE_dm_OrderProducts_OpenningTheSpecificOrder { get; set; }
        private DbSet<EXPOSE_dm_Orders_AmountResult> EXPOSE_dm_Orders_Amount { get; set; }
        private DbSet<EXPOSE_dm_Orders_ArchiveListResult> EXPOSE_dm_Orders_ArchiveList { get; set; }
        private DbSet<EXPOSE_dm_Orders_ListResult> EXPOSE_dm_Orders_List { get; set; }
        private DbSet<EXPOSE_dm_Orders_MagazynListResult> EXPOSE_dm_Orders_MagazynList { get; set; }
        private DbSet<EXPOSE_dm_Orders_SearchResult> EXPOSE_dm_Orders_Search { get; set; }
        private DbSet<EXPOSE_dm_Orders_SelectFromArchivumResult> EXPOSE_dm_Orders_SelectFromArchivum { get; set; }
        private DbSet<EXPOSE_dm_Orders_SelectingAllNewOrdersResult> EXPOSE_dm_Orders_SelectingAllNewOrders { get; set; }
        private DbSet<EXPOSE_dm_Positions_ListResult> EXPOSE_dm_Positions_List { get; set; }
        private DbSet<EXPOSE_dm_Products_ByOrderIdResult> EXPOSE_dm_Products_ByOrderId { get; set; }
        private DbSet<EXPOSE_dm_Products_listResult> EXPOSE_dm_Products_list { get; set; }
        private DbSet<EXPOSE_dm_Products_SearchingByNameAndSizeResult> EXPOSE_dm_Products_SearchingByNameAndSize { get; set; }
        private DbSet<EXPOSE_dm_Products_SelectingByGtinNumberResult> EXPOSE_dm_Products_SelectingByGtinNumber { get; set; }
        private DbSet<EXPOSE_dm_ProductStatuses_ListResult> EXPOSE_dm_ProductStatuses_List { get; set; }
        private DbSet<EXPOSE_dm_Sizes_listResult> EXPOSE_dm_Sizes_list { get; set; }
        private DbSet<EXPOSE_dm_SKUCodes_listResult> EXPOSE_dm_SKUCodes_list { get; set; }
        private DbSet<EXPOSE_dm_Storage_BlockListResult> EXPOSE_dm_Storage_BlockList { get; set; }
        private DbSet<EXPOSE_dm_Storage_listResult> EXPOSE_dm_Storage_list { get; set; }
        private DbSet<EXPOSE_dm_Users_ListResult> EXPOSE_dm_Users_List { get; set; }
        private DbSet<EXPOSE_dm_UsersAccess_ByUserIdResult> EXPOSE_dm_UsersAccess_ByUserId { get; set; }
        private DbSet<SaveMessageResult> SaveMessage { get; set; }
        private DbSet<SaveOutgoingMessageResult> SaveOutgoingMessage { get; set; }

        public SPToCoreContext()
        {
        }

        public SPToCoreContext(DbContextOptions<FioRinoBaseContext> options)
            : base(options)
        {
        }               

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {            
            // No key            
            modelBuilder.Entity<EXPOSE_dm_DownloadingStatus_LoadingProcessResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_DownloadingStatus_SuccessDateResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_OrderProducts_GetOrderDetailResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Orders_AmountResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Orders_ArchiveListResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Orders_ListResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Orders_MagazynListResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Orders_SearchResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Orders_SelectFromArchivumResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Orders_SelectingAllNewOrdersResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Positions_ListResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Products_ByOrderIdResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Products_listResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Products_SearchingByNameAndSizeResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Products_SelectingByGtinNumberResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_ProductStatuses_ListResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Sizes_listResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_SKUCodes_listResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Storage_BlockListResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Storage_listResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_Users_ListResult>().HasNoKey();
            modelBuilder.Entity<EXPOSE_dm_UsersAccess_ByUserIdResult>().HasNoKey();
            modelBuilder.Entity<SaveMessageResult>().HasNoKey();
            modelBuilder.Entity<SaveOutgoingMessageResult>().HasNoKey();
            //Thanks Valecass!!!
            base.OnModelCreating(modelBuilder);
        }

        public void ChangeAutoStatusOutgoingMessage(int? ID,bool? NoAuto)
        {

                // Parameters
                SqlParameter p_ID = new SqlParameter("@ID", ID ?? (object)DBNull.Value);
                p_ID.Direction = ParameterDirection.Input;
                p_ID.DbType = DbType.Int32;
                p_ID.Size = 4;

                SqlParameter p_NoAuto = new SqlParameter("@NoAuto", NoAuto ?? (object)DBNull.Value);
                p_NoAuto.Direction = ParameterDirection.Input;
                p_NoAuto.DbType = DbType.Boolean;
                p_NoAuto.Size = 1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeAutoStatusOutgoingMessage] @ID, @NoAuto";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_ID , p_NoAuto );

            //Return
        }

        public void ChangeColumnProperty(string TableName,string ColumnName,string PropertyName,string PropertyValue)
        {

                // Parameters
                SqlParameter p_TableName = new SqlParameter("@TableName", TableName ?? (object)DBNull.Value);
                p_TableName.Direction = ParameterDirection.Input;
                p_TableName.DbType = DbType.String;
                p_TableName.Size = 256;

                SqlParameter p_ColumnName = new SqlParameter("@ColumnName", ColumnName ?? (object)DBNull.Value);
                p_ColumnName.Direction = ParameterDirection.Input;
                p_ColumnName.DbType = DbType.String;
                p_ColumnName.Size = 256;

                SqlParameter p_PropertyName = new SqlParameter("@PropertyName", PropertyName ?? (object)DBNull.Value);
                p_PropertyName.Direction = ParameterDirection.Input;
                p_PropertyName.DbType = DbType.String;
                p_PropertyName.Size = 256;

                SqlParameter p_PropertyValue = new SqlParameter("@PropertyValue", PropertyValue ?? (object)DBNull.Value);
                p_PropertyValue.Direction = ParameterDirection.Input;
                p_PropertyValue.DbType = DbType.String;
                p_PropertyValue.Size = 2048;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeColumnProperty] @TableName, @ColumnName, @PropertyName, @PropertyValue";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_TableName , p_ColumnName , p_PropertyName , p_PropertyValue );

            //Return
        }

        public void ChangeDeliveryStatusIncomingMessage(string MessageId,Byte? State)
        {

                // Parameters
                SqlParameter p_MessageId = new SqlParameter("@MessageId", MessageId ?? (object)DBNull.Value);
                p_MessageId.Direction = ParameterDirection.Input;
                p_MessageId.DbType = DbType.String;
                p_MessageId.Size = 1024;

                SqlParameter p_State = new SqlParameter("@State", State ?? (object)DBNull.Value);
                p_State.Direction = ParameterDirection.Input;
                p_State.DbType = DbType.Byte;
                p_State.Size = 1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeDeliveryStatusIncomingMessage] @MessageId, @State";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_MessageId , p_State );

            //Return
        }

        public void ChangeTableProperty(string ObjectName,string PropertyName,string PropertyValue)
        {

                // Parameters
                SqlParameter p_ObjectName = new SqlParameter("@ObjectName", ObjectName ?? (object)DBNull.Value);
                p_ObjectName.Direction = ParameterDirection.Input;
                p_ObjectName.DbType = DbType.String;
                p_ObjectName.Size = 256;

                SqlParameter p_PropertyName = new SqlParameter("@PropertyName", PropertyName ?? (object)DBNull.Value);
                p_PropertyName.Direction = ParameterDirection.Input;
                p_PropertyName.DbType = DbType.String;
                p_PropertyName.Size = 256;

                SqlParameter p_PropertyValue = new SqlParameter("@PropertyValue", PropertyValue ?? (object)DBNull.Value);
                p_PropertyValue.Direction = ParameterDirection.Input;
                p_PropertyValue.DbType = DbType.String;
                p_PropertyValue.Size = 2048;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[ChangeTableProperty] @ObjectName, @PropertyName, @PropertyValue";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_ObjectName , p_PropertyName , p_PropertyValue );

            //Return
        }

        public async Task<List<EXPOSE_dm_DownloadingStatus_LoadingProcessResult>> EXPOSE_dm_DownloadingStatus_LoadingProcessAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_DownloadingStatus_LoadingProcessResult> lst = new List<EXPOSE_dm_DownloadingStatus_LoadingProcessResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_DownloadingStatus_LoadingProcess] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_DownloadingStatus_LoadingProcess.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_DownloadingStatus_SuccessDateResult>> EXPOSE_dm_DownloadingStatus_SuccessDateAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_DownloadingStatus_SuccessDateResult> lst = new List<EXPOSE_dm_DownloadingStatus_SuccessDateResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_DownloadingStatus_SuccessDate] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_DownloadingStatus_SuccessDate.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_FileWz_Create(string FileName,int? Filetype,decimal? FileSize,int? UserId, int? Id)
        {

                // Parameters
                SqlParameter p_FileName = new SqlParameter("@FileName", FileName ?? (object)DBNull.Value);
                p_FileName.Direction = ParameterDirection.Input;
                p_FileName.DbType = DbType.String;
                p_FileName.Size = 100;

                SqlParameter p_Filetype = new SqlParameter("@Filetype", Filetype ?? (object)DBNull.Value);
                p_Filetype.Direction = ParameterDirection.Input;
                p_Filetype.DbType = DbType.Int32;
                p_Filetype.Size = 4;

                SqlParameter p_FileSize = new SqlParameter("@FileSize", FileSize ?? (object)DBNull.Value);
                p_FileSize.Direction = ParameterDirection.Input;
                p_FileSize.DbType = DbType.Decimal;
                p_FileSize.Size = 9;

                SqlParameter p_UserId = new SqlParameter("@UserId", UserId ?? (object)DBNull.Value);
                p_UserId.Direction = ParameterDirection.Input;
                p_UserId.DbType = DbType.Int32;
                p_UserId.Size = 4;

                SqlParameter p_Id = new SqlParameter("@Id", Id ?? (object)DBNull.Value);
                p_Id.Direction = ParameterDirection.Output;
                p_Id.DbType = DbType.Int32;
                p_Id.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_FileWz_Create] @FileName, @Filetype, @FileSize, @UserId, @Id OUTPUT";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_FileName , p_Filetype , p_FileSize , p_UserId , p_Id );
                
                //Output Params
                Id = (int?)p_Id.Value;

            //Return
        }

        public async Task<List<EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult>> EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuAsync(int? ProductId)
        {
            //Initialize Result 
            List<EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult> lst = new List<EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult>();

                // Parameters
                SqlParameter p_ProductId = new SqlParameter("@ProductId", ProductId ?? (object)DBNull.Value);
                p_ProductId.Direction = ParameterDirection.Input;
                p_ProductId.DbType = DbType.Int32;
                p_ProductId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderProducts_DetailProductListStanMagazynu] @ProductId";
                
                //Output Data
                lst = await this.EXPOSE_dm_OrderProducts_DetailProductListStanMagazynu.FromSqlRaw(sqlQuery , p_ProductId ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_OrderProducts_GetOrderDetailResult>> EXPOSE_dm_OrderProducts_GetOrderDetailAsync(int? OrderId)
        {
            //Initialize Result 
            List<EXPOSE_dm_OrderProducts_GetOrderDetailResult> lst = new List<EXPOSE_dm_OrderProducts_GetOrderDetailResult>();

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderProducts_GetOrderDetail] @OrderId";
                
                //Output Data
                lst = await this.EXPOSE_dm_OrderProducts_GetOrderDetail.FromSqlRaw(sqlQuery , p_OrderId ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_OrderProducts_InsertProduct(int? ProductId,int? UniqueProductId,int? OrderId,int? SizeId,int? SKUcodeId,int? CategoryId,int? Amount,ref int? OrderProductId)
        {

                // Parameters
                SqlParameter p_ProductId = new SqlParameter("@ProductId", ProductId ?? (object)DBNull.Value);
                p_ProductId.Direction = ParameterDirection.Input;
                p_ProductId.DbType = DbType.Int32;
                p_ProductId.Size = 4;

                SqlParameter p_UniqueProductId = new SqlParameter("@UniqueProductId", UniqueProductId ?? (object)DBNull.Value);
                p_UniqueProductId.Direction = ParameterDirection.Input;
                p_UniqueProductId.DbType = DbType.Int32;
                p_UniqueProductId.Size = 4;

                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;

                SqlParameter p_SizeId = new SqlParameter("@SizeId", SizeId ?? (object)DBNull.Value);
                p_SizeId.Direction = ParameterDirection.Input;
                p_SizeId.DbType = DbType.Int32;
                p_SizeId.Size = 4;

                SqlParameter p_SKUcodeId = new SqlParameter("@SKUcodeId", SKUcodeId ?? (object)DBNull.Value);
                p_SKUcodeId.Direction = ParameterDirection.Input;
                p_SKUcodeId.DbType = DbType.Int32;
                p_SKUcodeId.Size = 4;

                SqlParameter p_CategoryId = new SqlParameter("@CategoryId", CategoryId ?? (object)DBNull.Value);
                p_CategoryId.Direction = ParameterDirection.Input;
                p_CategoryId.DbType = DbType.Int32;
                p_CategoryId.Size = 4;

                SqlParameter p_Amount = new SqlParameter("@Amount", Amount ?? (object)DBNull.Value);
                p_Amount.Direction = ParameterDirection.Input;
                p_Amount.DbType = DbType.Int32;
                p_Amount.Size = 4;

                SqlParameter p_OrderProductId = new SqlParameter("@OrderProductId", OrderProductId ?? (object)DBNull.Value);
                p_OrderProductId.Direction = ParameterDirection.Output;
                p_OrderProductId.DbType = DbType.Int32;
                p_OrderProductId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderProducts_InsertProduct] @ProductId, @UniqueProductId, @OrderId, @SizeId, @SKUcodeId, @CategoryId, @Amount, @OrderProductId OUTPUT";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_ProductId , p_UniqueProductId , p_OrderId , p_SizeId , p_SKUcodeId , p_CategoryId , p_Amount , p_OrderProductId );
                
                //Output Params
                OrderProductId = (int?)p_OrderProductId.Value;

            //Return
        }

        public async Task<List<EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult>> EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderAsync(int? OrderId)
        {
            //Initialize Result 
            List<EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult> lst = new List<EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult>();

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_OrderProducts_OpenningTheSpecificOrder] @OrderId";
                
                //Output Data
                lst = await this.EXPOSE_dm_OrderProducts_OpenningTheSpecificOrder.FromSqlRaw(sqlQuery , p_OrderId ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Orders_AmountResult>> EXPOSE_dm_Orders_AmountAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_Orders_AmountResult> lst = new List<EXPOSE_dm_Orders_AmountResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_Amount] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_Orders_Amount.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Orders_ArchiveListResult>> EXPOSE_dm_Orders_ArchiveListAsync(int? SearchString)
        {
            //Initialize Result 
            List<EXPOSE_dm_Orders_ArchiveListResult> lst = new List<EXPOSE_dm_Orders_ArchiveListResult>();

                // Parameters
                SqlParameter p_SearchString = new SqlParameter("@SearchString", SearchString ?? (object)DBNull.Value);
                p_SearchString.Direction = ParameterDirection.Input;
                p_SearchString.DbType = DbType.Int32;
                p_SearchString.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_ArchiveList] @SearchString";
                
                //Output Data
                lst = await this.EXPOSE_dm_Orders_ArchiveList.FromSqlRaw(sqlQuery , p_SearchString ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_Orders_CreateOrder(DateTime? CreatedAt,DateTime? UpdatedAt,int? OrderStatusId,bool? Is_InMagazyn,string SourceOfOrder,string OrderExecutor,string SenderName,ref int? OrderId)
        {

                // Parameters
                SqlParameter p_CreatedAt = new SqlParameter("@CreatedAt", CreatedAt ?? (object)DBNull.Value);
                p_CreatedAt.Direction = ParameterDirection.Input;
                p_CreatedAt.DbType = DbType.DateTime;
                p_CreatedAt.Size = 3;

                SqlParameter p_UpdatedAt = new SqlParameter("@UpdatedAt", UpdatedAt ?? (object)DBNull.Value);
                p_UpdatedAt.Direction = ParameterDirection.Input;
                p_UpdatedAt.DbType = DbType.DateTime;
                p_UpdatedAt.Size = 3;

                SqlParameter p_OrderStatusId = new SqlParameter("@OrderStatusId", OrderStatusId ?? (object)DBNull.Value);
                p_OrderStatusId.Direction = ParameterDirection.Input;
                p_OrderStatusId.DbType = DbType.Int32;
                p_OrderStatusId.Size = 4;

                SqlParameter p_Is_InMagazyn = new SqlParameter("@Is_InMagazyn", Is_InMagazyn ?? (object)DBNull.Value);
                p_Is_InMagazyn.Direction = ParameterDirection.Input;
                p_Is_InMagazyn.DbType = DbType.Boolean;
                p_Is_InMagazyn.Size = 1;

                SqlParameter p_SourceOfOrder = new SqlParameter("@SourceOfOrder", SourceOfOrder ?? (object)DBNull.Value);
                p_SourceOfOrder.Direction = ParameterDirection.Input;
                p_SourceOfOrder.DbType = DbType.String;
                p_SourceOfOrder.Size = 100;

                SqlParameter p_OrderExecutor = new SqlParameter("@OrderExecutor", OrderExecutor ?? (object)DBNull.Value);
                p_OrderExecutor.Direction = ParameterDirection.Input;
                p_OrderExecutor.DbType = DbType.String;
                p_OrderExecutor.Size = 100;

                SqlParameter p_SenderName = new SqlParameter("@SenderName", SenderName ?? (object)DBNull.Value);
                p_SenderName.Direction = ParameterDirection.Input;
                p_SenderName.DbType = DbType.String;
                p_SenderName.Size = 100;

                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Output;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_CreateOrder] @CreatedAt, @UpdatedAt, @OrderStatusId, @Is_InMagazyn, @SourceOfOrder, @OrderExecutor, @SenderName, @OrderId OUTPUT";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_CreatedAt , p_UpdatedAt , p_OrderStatusId , p_Is_InMagazyn , p_SourceOfOrder , p_OrderExecutor , p_SenderName , p_OrderId );
                
                //Output Params
                OrderId = (int?)p_OrderId.Value;

            //Return
        }

        public async Task<List<EXPOSE_dm_Orders_ListResult>> EXPOSE_dm_Orders_ListAsync(int? SearchString)
        {
            //Initialize Result 
            List<EXPOSE_dm_Orders_ListResult> lst = new List<EXPOSE_dm_Orders_ListResult>();

                // Parameters
                SqlParameter p_SearchString = new SqlParameter("@SearchString", SearchString ?? (object)DBNull.Value);
                p_SearchString.Direction = ParameterDirection.Input;
                p_SearchString.DbType = DbType.Int32;
                p_SearchString.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_List] @SearchString";
                
                //Output Data
                lst = await this.EXPOSE_dm_Orders_List.FromSqlRaw(sqlQuery , p_SearchString ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Orders_MagazynListResult>> EXPOSE_dm_Orders_MagazynListAsync(int? SearchString)
        {
            //Initialize Result 
            List<EXPOSE_dm_Orders_MagazynListResult> lst = new List<EXPOSE_dm_Orders_MagazynListResult>();

                // Parameters
                SqlParameter p_SearchString = new SqlParameter("@SearchString", SearchString ?? (object)DBNull.Value);
                p_SearchString.Direction = ParameterDirection.Input;
                p_SearchString.DbType = DbType.Int32;
                p_SearchString.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_MagazynList] @SearchString";
                
                //Output Data
                lst = await this.EXPOSE_dm_Orders_MagazynList.FromSqlRaw(sqlQuery , p_SearchString ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Orders_SearchResult>> EXPOSE_dm_Orders_SearchAsync(int? SearchString)
        {
            //Initialize Result 
            List<EXPOSE_dm_Orders_SearchResult> lst = new List<EXPOSE_dm_Orders_SearchResult>();

                // Parameters
                SqlParameter p_SearchString = new SqlParameter("@SearchString", SearchString ?? (object)DBNull.Value);
                p_SearchString.Direction = ParameterDirection.Input;
                p_SearchString.DbType = DbType.Int32;
                p_SearchString.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_Search] @SearchString";
                
                //Output Data
                lst = await this.EXPOSE_dm_Orders_Search.FromSqlRaw(sqlQuery , p_SearchString ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Orders_SelectFromArchivumResult>> EXPOSE_dm_Orders_SelectFromArchivumAsync(int? SearchString)
        {
            //Initialize Result 
            List<EXPOSE_dm_Orders_SelectFromArchivumResult> lst = new List<EXPOSE_dm_Orders_SelectFromArchivumResult>();

                // Parameters
                SqlParameter p_SearchString = new SqlParameter("@SearchString", SearchString ?? (object)DBNull.Value);
                p_SearchString.Direction = ParameterDirection.Input;
                p_SearchString.DbType = DbType.Int32;
                p_SearchString.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_SelectFromArchivum] @SearchString";
                
                //Output Data
                lst = await this.EXPOSE_dm_Orders_SelectFromArchivum.FromSqlRaw(sqlQuery , p_SearchString ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Orders_SelectingAllNewOrdersResult>> EXPOSE_dm_Orders_SelectingAllNewOrdersAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_Orders_SelectingAllNewOrdersResult> lst = new List<EXPOSE_dm_Orders_SelectingAllNewOrdersResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_SelectingAllNewOrders] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_Orders_SelectingAllNewOrders.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_Orders_SendToArchivum(int? OrderId)
        {

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_SendToArchivum] @OrderId";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_OrderId );

            //Return
        }

        public void EXPOSE_dm_Orders_UpdateIsInMagazynTrue(int? OrderId)
        {

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Orders_UpdateIsInMagazynTrue] @OrderId";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_OrderId );

            //Return
        }

        public async Task<List<EXPOSE_dm_Positions_ListResult>> EXPOSE_dm_Positions_ListAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_Positions_ListResult> lst = new List<EXPOSE_dm_Positions_ListResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Positions_List] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_Positions_List.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Products_ByOrderIdResult>> EXPOSE_dm_Products_ByOrderIdAsync(int? OrderId,int? CurrentUserId)
        {
            //Initialize Result 
            List<EXPOSE_dm_Products_ByOrderIdResult> lst = new List<EXPOSE_dm_Products_ByOrderIdResult>();

                // Parameters
                SqlParameter p_OrderId = new SqlParameter("@OrderId", OrderId ?? (object)DBNull.Value);
                p_OrderId.Direction = ParameterDirection.Input;
                p_OrderId.DbType = DbType.Int32;
                p_OrderId.Size = 4;

                SqlParameter p_CurrentUserId = new SqlParameter("@CurrentUserId", CurrentUserId ?? (object)DBNull.Value);
                p_CurrentUserId.Direction = ParameterDirection.Input;
                p_CurrentUserId.DbType = DbType.Int32;
                p_CurrentUserId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_ByOrderId] @OrderId, @CurrentUserId";
                
                //Output Data
                lst = await this.EXPOSE_dm_Products_ByOrderId.FromSqlRaw(sqlQuery , p_OrderId , p_CurrentUserId ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Products_listResult>> EXPOSE_dm_Products_listAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_Products_listResult> lst = new List<EXPOSE_dm_Products_listResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_list] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_Products_list.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Products_SearchingByNameAndSizeResult>> EXPOSE_dm_Products_SearchingByNameAndSizeAsync(string productName,string Size)
        {
            //Initialize Result 
            List<EXPOSE_dm_Products_SearchingByNameAndSizeResult> lst = new List<EXPOSE_dm_Products_SearchingByNameAndSizeResult>();

                // Parameters
                SqlParameter p_productName = new SqlParameter("@productName", productName ?? (object)DBNull.Value);
                p_productName.Direction = ParameterDirection.Input;
                p_productName.DbType = DbType.String;
                p_productName.Size = 100;

                SqlParameter p_Size = new SqlParameter("@Size", Size ?? (object)DBNull.Value);
                p_Size.Direction = ParameterDirection.Input;
                p_Size.DbType = DbType.String;
                p_Size.Size = 100;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_SearchingByNameAndSize] @productName, @Size";
                
                //Output Data
                lst = await this.EXPOSE_dm_Products_SearchingByNameAndSize.FromSqlRaw(sqlQuery , p_productName , p_Size ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Products_SelectingByGtinNumberResult>> EXPOSE_dm_Products_SelectingByGtinNumberAsync(string Gtin,int? Amount,int? SkuCodeId)
        {
            //Initialize Result 
            List<EXPOSE_dm_Products_SelectingByGtinNumberResult> lst = new List<EXPOSE_dm_Products_SelectingByGtinNumberResult>();

                // Parameters
                SqlParameter p_Gtin = new SqlParameter("@Gtin", Gtin ?? (object)DBNull.Value);
                p_Gtin.Direction = ParameterDirection.Input;
                p_Gtin.DbType = DbType.String;
                p_Gtin.Size = 100;

                SqlParameter p_Amount = new SqlParameter("@Amount", Amount ?? (object)DBNull.Value);
                p_Amount.Direction = ParameterDirection.Input;
                p_Amount.DbType = DbType.Int32;
                p_Amount.Size = 4;

                SqlParameter p_SkuCodeId = new SqlParameter("@SkuCodeId", SkuCodeId ?? (object)DBNull.Value);
                p_SkuCodeId.Direction = ParameterDirection.Input;
                p_SkuCodeId.DbType = DbType.Int32;
                p_SkuCodeId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Products_SelectingByGtinNumber] @Gtin, @Amount, @SkuCodeId";
                
                //Output Data
                lst = await this.EXPOSE_dm_Products_SelectingByGtinNumber.FromSqlRaw(sqlQuery , p_Gtin , p_Amount , p_SkuCodeId ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_ProductStatuses_ListResult>> EXPOSE_dm_ProductStatuses_ListAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_ProductStatuses_ListResult> lst = new List<EXPOSE_dm_ProductStatuses_ListResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_ProductStatuses_List] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_ProductStatuses_List.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Sizes_listResult>> EXPOSE_dm_Sizes_listAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_Sizes_listResult> lst = new List<EXPOSE_dm_Sizes_listResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Sizes_list] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_Sizes_list.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_SKUCodes_listResult>> EXPOSE_dm_SKUCodes_listAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_SKUCodes_listResult> lst = new List<EXPOSE_dm_SKUCodes_listResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_SKUCodes_list] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_SKUCodes_list.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Storage_BlockListResult>> EXPOSE_dm_Storage_BlockListAsync(string SearchString)
        {
            //Initialize Result 
            List<EXPOSE_dm_Storage_BlockListResult> lst = new List<EXPOSE_dm_Storage_BlockListResult>();

                // Parameters
                SqlParameter p_SearchString = new SqlParameter("@SearchString", SearchString ?? (object)DBNull.Value);
                p_SearchString.Direction = ParameterDirection.Input;
                p_SearchString.DbType = DbType.String;
                p_SearchString.Size = 100;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Storage_BlockList] @SearchString";
                
                //Output Data
                lst = await this.EXPOSE_dm_Storage_BlockList.FromSqlRaw(sqlQuery , p_SearchString ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_Storage_Insertingproducts(int? UniqueProductId,int? SkuCodeId,int? ProductId,int? CategoryId,int? SizeId,int? Amount,ref int? StorageId)
        {

                // Parameters
                SqlParameter p_UniqueProductId = new SqlParameter("@UniqueProductId", UniqueProductId ?? (object)DBNull.Value);
                p_UniqueProductId.Direction = ParameterDirection.Input;
                p_UniqueProductId.DbType = DbType.Int32;
                p_UniqueProductId.Size = 4;

                SqlParameter p_SkuCodeId = new SqlParameter("@SkuCodeId", SkuCodeId ?? (object)DBNull.Value);
                p_SkuCodeId.Direction = ParameterDirection.Input;
                p_SkuCodeId.DbType = DbType.Int32;
                p_SkuCodeId.Size = 4;

                SqlParameter p_ProductId = new SqlParameter("@ProductId", ProductId ?? (object)DBNull.Value);
                p_ProductId.Direction = ParameterDirection.Input;
                p_ProductId.DbType = DbType.Int32;
                p_ProductId.Size = 4;

                SqlParameter p_CategoryId = new SqlParameter("@CategoryId", CategoryId ?? (object)DBNull.Value);
                p_CategoryId.Direction = ParameterDirection.Input;
                p_CategoryId.DbType = DbType.Int32;
                p_CategoryId.Size = 4;

                SqlParameter p_SizeId = new SqlParameter("@SizeId", SizeId ?? (object)DBNull.Value);
                p_SizeId.Direction = ParameterDirection.Input;
                p_SizeId.DbType = DbType.Int32;
                p_SizeId.Size = 4;

                SqlParameter p_Amount = new SqlParameter("@Amount", Amount ?? (object)DBNull.Value);
                p_Amount.Direction = ParameterDirection.Input;
                p_Amount.DbType = DbType.Int32;
                p_Amount.Size = 4;

                SqlParameter p_StorageId = new SqlParameter("@StorageId", StorageId ?? (object)DBNull.Value);
                p_StorageId.Direction = ParameterDirection.Output;
                p_StorageId.DbType = DbType.Int32;
                p_StorageId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Storage_Insertingproducts] @UniqueProductId, @SkuCodeId, @ProductId, @CategoryId, @SizeId, @Amount, @StorageId OUTPUT";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_UniqueProductId , p_SkuCodeId , p_ProductId , p_CategoryId , p_SizeId , p_Amount , p_StorageId );
                
                //Output Params
                StorageId = (int?)p_StorageId.Value;

            //Return
        }

        public async Task<List<EXPOSE_dm_Storage_listResult>> EXPOSE_dm_Storage_listAsync(string SearchString)
        {
            //Initialize Result 
            List<EXPOSE_dm_Storage_listResult> lst = new List<EXPOSE_dm_Storage_listResult>();

                // Parameters
                SqlParameter p_SearchString = new SqlParameter("@SearchString", SearchString ?? (object)DBNull.Value);
                p_SearchString.Direction = ParameterDirection.Input;
                p_SearchString.DbType = DbType.String;
                p_SearchString.Size = 100;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Storage_list] @SearchString";
                
                //Output Data
                lst = await this.EXPOSE_dm_Storage_list.FromSqlRaw(sqlQuery , p_SearchString ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_Users_ListResult>> EXPOSE_dm_Users_ListAsync()
        {
            //Initialize Result 
            List<EXPOSE_dm_Users_ListResult> lst = new List<EXPOSE_dm_Users_ListResult>();


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_Users_List] ";
                
                //Output Data
                lst = await this.EXPOSE_dm_Users_List.FromSqlRaw(sqlQuery ).ToListAsync();

            //Return
            return lst;
        }

        public async Task<List<EXPOSE_dm_UsersAccess_ByUserIdResult>> EXPOSE_dm_UsersAccess_ByUserIdAsync(int? UserId)
        {
            //Initialize Result 
            List<EXPOSE_dm_UsersAccess_ByUserIdResult> lst = new List<EXPOSE_dm_UsersAccess_ByUserIdResult>();

                // Parameters
                SqlParameter p_UserId = new SqlParameter("@UserId", UserId ?? (object)DBNull.Value);
                p_UserId.Direction = ParameterDirection.Input;
                p_UserId.DbType = DbType.Int32;
                p_UserId.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_UsersAccess_ByUserId] @UserId";
                
                //Output Data
                lst = await this.EXPOSE_dm_UsersAccess_ByUserId.FromSqlRaw(sqlQuery , p_UserId ).ToListAsync();

            //Return
            return lst;
        }

        public void EXPOSE_dm_UsersAccess_UpdateAccesses(int? UserId,bool? Hurt,bool? Magazyn,bool? Archive)
        {

                // Parameters
                SqlParameter p_UserId = new SqlParameter("@UserId", UserId ?? (object)DBNull.Value);
                p_UserId.Direction = ParameterDirection.Input;
                p_UserId.DbType = DbType.Int32;
                p_UserId.Size = 4;

                SqlParameter p_Hurt = new SqlParameter("@Hurt", Hurt ?? (object)DBNull.Value);
                p_Hurt.Direction = ParameterDirection.Input;
                p_Hurt.DbType = DbType.Boolean;
                p_Hurt.Size = 1;

                SqlParameter p_Magazyn = new SqlParameter("@Magazyn", Magazyn ?? (object)DBNull.Value);
                p_Magazyn.Direction = ParameterDirection.Input;
                p_Magazyn.DbType = DbType.Boolean;
                p_Magazyn.Size = 1;

                SqlParameter p_Archive = new SqlParameter("@Archive", Archive ?? (object)DBNull.Value);
                p_Archive.Direction = ParameterDirection.Input;
                p_Archive.DbType = DbType.Boolean;
                p_Archive.Size = 1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_UsersAccess_UpdateAccesses] @UserId, @Hurt, @Magazyn, @Archive";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_UserId , p_Hurt , p_Magazyn , p_Archive );

            //Return
        }

        public void EXPOSE_dm_WzMagazyn_UpdateProductAmountInStanMagazynu(int? WzMagazynId,int? Amount)
        {

                // Parameters
                SqlParameter p_WzMagazynId = new SqlParameter("@WzMagazynId", WzMagazynId ?? (object)DBNull.Value);
                p_WzMagazynId.Direction = ParameterDirection.Input;
                p_WzMagazynId.DbType = DbType.Int32;
                p_WzMagazynId.Size = 4;

                SqlParameter p_Amount = new SqlParameter("@Amount", Amount ?? (object)DBNull.Value);
                p_Amount.Direction = ParameterDirection.Input;
                p_Amount.DbType = DbType.Int32;
                p_Amount.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[EXPOSE_dm_WzMagazyn_UpdateProductAmountInStanMagazynu] @WzMagazynId, @Amount";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_WzMagazynId , p_Amount );

            //Return
        }

        public void FixExtendedProperties()
        {


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[FixExtendedProperties] ";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery );

            //Return
        }

        public void GetLinkedEntities(string table,string linkEntity,int? id)
        {

                // Parameters
                SqlParameter p_table = new SqlParameter("@table", table ?? (object)DBNull.Value);
                p_table.Direction = ParameterDirection.Input;
                p_table.DbType = DbType.String;
                p_table.Size = 256;

                SqlParameter p_linkEntity = new SqlParameter("@linkEntity", linkEntity ?? (object)DBNull.Value);
                p_linkEntity.Direction = ParameterDirection.Input;
                p_linkEntity.DbType = DbType.String;
                p_linkEntity.Size = 256;

                SqlParameter p_id = new SqlParameter("@id", id ?? (object)DBNull.Value);
                p_id.Direction = ParameterDirection.Input;
                p_id.DbType = DbType.Int32;
                p_id.Size = 4;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[GetLinkedEntities] @table, @linkEntity, @id";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_table , p_linkEntity , p_id );

            //Return
        }

        public async Task<List<SaveMessageResult>> SaveMessageAsync(string MessageId,string ParentId,string Author,string Payload,string Comment,bool? Offline)
        {
            //Initialize Result 
            List<SaveMessageResult> lst = new List<SaveMessageResult>();

                // Parameters
                SqlParameter p_MessageId = new SqlParameter("@MessageId", MessageId ?? (object)DBNull.Value);
                p_MessageId.Direction = ParameterDirection.Input;
                p_MessageId.DbType = DbType.String;
                p_MessageId.Size = 1024;

                SqlParameter p_ParentId = new SqlParameter("@ParentId", ParentId ?? (object)DBNull.Value);
                p_ParentId.Direction = ParameterDirection.Input;
                p_ParentId.DbType = DbType.String;
                p_ParentId.Size = 1024;

                SqlParameter p_Author = new SqlParameter("@Author", Author ?? (object)DBNull.Value);
                p_Author.Direction = ParameterDirection.Input;
                p_Author.DbType = DbType.String;
                p_Author.Size = 1024;

                SqlParameter p_Payload = new SqlParameter("@Payload", Payload ?? (object)DBNull.Value);
                p_Payload.Direction = ParameterDirection.Input;
                p_Payload.DbType = DbType.String;
                p_Payload.Size = -1;

                SqlParameter p_Comment = new SqlParameter("@Comment", Comment ?? (object)DBNull.Value);
                p_Comment.Direction = ParameterDirection.Input;
                p_Comment.DbType = DbType.String;
                p_Comment.Size = 2048;

                SqlParameter p_Offline = new SqlParameter("@Offline", Offline ?? (object)DBNull.Value);
                p_Offline.Direction = ParameterDirection.Input;
                p_Offline.DbType = DbType.Boolean;
                p_Offline.Size = 1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[SaveMessage] @MessageId, @ParentId, @Author, @Payload, @Comment, @Offline";
                
                //Output Data
                lst = await this.SaveMessage.FromSqlRaw(sqlQuery , p_MessageId , p_ParentId , p_Author , p_Payload , p_Comment , p_Offline ).ToListAsync();

            //Return
            return lst;
        }

        public void SaveMessageDeliveryReport(int? ID,Byte? Result,string MessageID)
        {

                // Parameters
                SqlParameter p_ID = new SqlParameter("@ID", ID ?? (object)DBNull.Value);
                p_ID.Direction = ParameterDirection.Input;
                p_ID.DbType = DbType.Int32;
                p_ID.Size = 4;

                SqlParameter p_Result = new SqlParameter("@Result", Result ?? (object)DBNull.Value);
                p_Result.Direction = ParameterDirection.Input;
                p_Result.DbType = DbType.Byte;
                p_Result.Size = 1;

                SqlParameter p_MessageID = new SqlParameter("@MessageID", MessageID ?? (object)DBNull.Value);
                p_MessageID.Direction = ParameterDirection.Input;
                p_MessageID.DbType = DbType.String;
                p_MessageID.Size = 1024;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[SaveMessageDeliveryReport] @ID, @Result, @MessageID";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_ID , p_Result , p_MessageID );

            //Return
        }

        public async Task<List<SaveOutgoingMessageResult>> SaveOutgoingMessageAsync(string Destination,string Payload,bool? NoAuto,string Comment)
        {
            //Initialize Result 
            List<SaveOutgoingMessageResult> lst = new List<SaveOutgoingMessageResult>();

                // Parameters
                SqlParameter p_Destination = new SqlParameter("@Destination", Destination ?? (object)DBNull.Value);
                p_Destination.Direction = ParameterDirection.Input;
                p_Destination.DbType = DbType.String;
                p_Destination.Size = 1024;

                SqlParameter p_Payload = new SqlParameter("@Payload", Payload ?? (object)DBNull.Value);
                p_Payload.Direction = ParameterDirection.Input;
                p_Payload.DbType = DbType.String;
                p_Payload.Size = -1;

                SqlParameter p_NoAuto = new SqlParameter("@NoAuto", NoAuto ?? (object)DBNull.Value);
                p_NoAuto.Direction = ParameterDirection.Input;
                p_NoAuto.DbType = DbType.Boolean;
                p_NoAuto.Size = 1;

                SqlParameter p_Comment = new SqlParameter("@Comment", Comment ?? (object)DBNull.Value);
                p_Comment.Direction = ParameterDirection.Input;
                p_Comment.DbType = DbType.String;
                p_Comment.Size = 2048;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[SaveOutgoingMessage] @Destination, @Payload, @NoAuto, @Comment";
                
                //Output Data
                lst = await this.SaveOutgoingMessage.FromSqlRaw(sqlQuery , p_Destination , p_Payload , p_NoAuto , p_Comment ).ToListAsync();

            //Return
            return lst;
        }

        public void WriteLog(int? UserId,string EntityName,int? EntityId,Byte? ActionType,bool? Success,string Info)
        {

                // Parameters
                SqlParameter p_UserId = new SqlParameter("@UserId", UserId ?? (object)DBNull.Value);
                p_UserId.Direction = ParameterDirection.Input;
                p_UserId.DbType = DbType.Int32;
                p_UserId.Size = 4;

                SqlParameter p_EntityName = new SqlParameter("@EntityName", EntityName ?? (object)DBNull.Value);
                p_EntityName.Direction = ParameterDirection.Input;
                p_EntityName.DbType = DbType.String;
                p_EntityName.Size = 512;

                SqlParameter p_EntityId = new SqlParameter("@EntityId", EntityId ?? (object)DBNull.Value);
                p_EntityId.Direction = ParameterDirection.Input;
                p_EntityId.DbType = DbType.Int32;
                p_EntityId.Size = 4;

                SqlParameter p_ActionType = new SqlParameter("@ActionType", ActionType ?? (object)DBNull.Value);
                p_ActionType.Direction = ParameterDirection.Input;
                p_ActionType.DbType = DbType.Byte;
                p_ActionType.Size = 1;

                SqlParameter p_Success = new SqlParameter("@Success", Success ?? (object)DBNull.Value);
                p_Success.Direction = ParameterDirection.Input;
                p_Success.DbType = DbType.Boolean;
                p_Success.Size = 1;

                SqlParameter p_Info = new SqlParameter("@Info", Info ?? (object)DBNull.Value);
                p_Info.Direction = ParameterDirection.Input;
                p_Info.DbType = DbType.String;
                p_Info.Size = -1;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[WriteLog] @UserId, @EntityName, @EntityId, @ActionType, @Success, @Info";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_UserId , p_EntityName , p_EntityId , p_ActionType , p_Success , p_Info );

            //Return
        }

        public void WriteLogWithTime(int? UserId,string EntityName,int? EntityId,Byte? ActionType,bool? Success,string Info,DateTime? TimeStart,DateTime? TimeFinish)
        {

                // Parameters
                SqlParameter p_UserId = new SqlParameter("@UserId", UserId ?? (object)DBNull.Value);
                p_UserId.Direction = ParameterDirection.Input;
                p_UserId.DbType = DbType.Int32;
                p_UserId.Size = 4;

                SqlParameter p_EntityName = new SqlParameter("@EntityName", EntityName ?? (object)DBNull.Value);
                p_EntityName.Direction = ParameterDirection.Input;
                p_EntityName.DbType = DbType.String;
                p_EntityName.Size = 512;

                SqlParameter p_EntityId = new SqlParameter("@EntityId", EntityId ?? (object)DBNull.Value);
                p_EntityId.Direction = ParameterDirection.Input;
                p_EntityId.DbType = DbType.Int32;
                p_EntityId.Size = 4;

                SqlParameter p_ActionType = new SqlParameter("@ActionType", ActionType ?? (object)DBNull.Value);
                p_ActionType.Direction = ParameterDirection.Input;
                p_ActionType.DbType = DbType.Byte;
                p_ActionType.Size = 1;

                SqlParameter p_Success = new SqlParameter("@Success", Success ?? (object)DBNull.Value);
                p_Success.Direction = ParameterDirection.Input;
                p_Success.DbType = DbType.Boolean;
                p_Success.Size = 1;

                SqlParameter p_Info = new SqlParameter("@Info", Info ?? (object)DBNull.Value);
                p_Info.Direction = ParameterDirection.Input;
                p_Info.DbType = DbType.String;
                p_Info.Size = -1;

                SqlParameter p_TimeStart = new SqlParameter("@TimeStart", TimeStart ?? (object)DBNull.Value);
                p_TimeStart.Direction = ParameterDirection.Input;
                p_TimeStart.DbType = DbType.DateTime;
                p_TimeStart.Size = 8;

                SqlParameter p_TimeFinish = new SqlParameter("@TimeFinish", TimeFinish ?? (object)DBNull.Value);
                p_TimeFinish.Direction = ParameterDirection.Input;
                p_TimeFinish.DbType = DbType.DateTime;
                p_TimeFinish.Size = 8;


                // Processing 
                string sqlQuery = $@"EXEC [dbo].[WriteLogWithTime] @UserId, @EntityName, @EntityId, @ActionType, @Success, @Info, @TimeStart, @TimeFinish";
                //Execution
                this.Database.ExecuteSqlRaw(sqlQuery , p_UserId , p_EntityName , p_EntityId , p_ActionType , p_Success , p_Info , p_TimeStart , p_TimeFinish );

            //Return
        }


        public class EXPOSE_dm_DownloadingStatus_LoadingProcessResult
        {
            public int Id { get; set; }
            public int? CurrentAmount { get; set; }
            public int? TotalAmount { get; set; }
            public string Status { get; set; }
        }

        public class EXPOSE_dm_DownloadingStatus_SuccessDateResult
        {
            public int Id { get; set; }
            public DateTime? SuccessDate { get; set; }
        }

        public class EXPOSE_dm_OrderProducts_DetailProductListStanMagazynuResult
        {
            public string SKUnumber { get; set; }
            public string ProductName { get; set; }
            public string CategoryName { get; set; }
            public string Size { get; set; }
            public int? Amount { get; set; }
        }

        public class EXPOSE_dm_OrderProducts_GetOrderDetailResult
        {
            public int Id { get; set; }
            public string OrderExecutor { get; set; }
            public string Sender { get; set; }
            public string Receiver { get; set; }
            public DateTime? CreatedAt { get; set; }
            public DateTime? DateOfRelease { get; set; }
        }

        public class EXPOSE_dm_OrderProducts_OpenningTheSpecificOrderResult
        {
            public string SKUnumber { get; set; }
            public string ProductName { get; set; }
            public string CategoryName { get; set; }
            public string Size { get; set; }
        }

        public class EXPOSE_dm_Orders_AmountResult
        {
            public int? OrderAmount { get; set; }
        }

        public class EXPOSE_dm_Orders_ArchiveListResult
        {
            public int Id { get; set; }
            public DateTime? CreatedAt { get; set; }
            public string Sender { get; set; }
            public string Receiver { get; set; }
            public int? Amount { get; set; }
            public DateTime? DateOfRelease { get; set; }
        }

        public class EXPOSE_dm_Orders_ListResult
        {
            public int Id { get; set; }
            public DateTime? CreatedAt { get; set; }
            public string SourceOfOrder { get; set; }
            public int? Amount { get; set; }
            public int? OrderStatusId { get; set; }
        }

        public class EXPOSE_dm_Orders_MagazynListResult
        {
            public int Id { get; set; }
            public DateTime? CreatedAt { get; set; }
            public string Sender { get; set; }
            public string Receiver { get; set; }
            public int? Amount { get; set; }
            public int? OrderStatusId { get; set; }
            public string OrderStatusName { get; set; }
        }

        public class EXPOSE_dm_Orders_SearchResult
        {
            public int Id { get; set; }
            public DateTime? CreatedAt { get; set; }
            public int? Amount { get; set; }
            public string SourceOfOrder { get; set; }
            public int? OrderStatusId { get; set; }
            public string OrderStatusName { get; set; }
        }

        public class EXPOSE_dm_Orders_SelectFromArchivumResult
        {
            public int Id { get; set; }
            public DateTime? CreatedAt { get; set; }
            public string Sender { get; set; }
            public string Receiver { get; set; }
            public int? Amount { get; set; }
            public DateTime? DateOfRelease { get; set; }
        }

        public class EXPOSE_dm_Orders_SelectingAllNewOrdersResult
        {
            public DateTime? CreatedAt { get; set; }
            public int? Amount { get; set; }
            public string SourceOfOrder { get; set; }
        }

        public class EXPOSE_dm_Positions_ListResult
        {
            public int Id { get; set; }
            public string PositionName { get; set; }
        }

        public class EXPOSE_dm_Products_ByOrderIdResult
        {
            public int Id { get; set; }
            public int? SKUcodeId { get; set; }
            public string SKUCode { get; set; }
            public int? Amount { get; set; }
            public int? ProductId { get; set; }
            public string ProductName { get; set; }
            public int? CategoryId { get; set; }
            public string CategoryName { get; set; }
            public int? SizeId { get; set; }
            public string SizeName { get; set; }
            public int? ProductStatusId { get; set; }
            public string ProductStatusName { get; set; }
            public int? SenderId { get; set; }
            public bool? Is_InMagazyn { get; set; }
            public string GTIN { get; set; }
            public int? uniqueProductId { get; set; }
        }

        public class EXPOSE_dm_Products_listResult
        {
            public int Id { get; set; }
            public string ProductName { get; set; }
        }

        public class EXPOSE_dm_Products_SearchingByNameAndSizeResult
        {
            public int Id { get; set; }
            public string GTIN { get; set; }
            public string SKUcodeName { get; set; }
            public int? ProductId { get; set; }
            public string ProductName { get; set; }
            public int? CategoryId { get; set; }
            public string CategoryName { get; set; }
            public int SizeId { get; set; }
            public string SizeName { get; set; }
            public int? Amount { get; set; }
        }

        public class EXPOSE_dm_Products_SelectingByGtinNumberResult
        {
            public string GTIN { get; set; }
            public string SKUnumber { get; set; }
            public int ProductId { get; set; }
            public string ProductName { get; set; }
            public int? CategoryId { get; set; }
            public string CategoryName { get; set; }
            public int? SizeId { get; set; }
            public string SizeName { get; set; }
        }

        public class EXPOSE_dm_ProductStatuses_ListResult
        {
            public int Id { get; set; }
            public string StatusDescription { get; set; }
            public string StatusColor { get; set; }
        }

        public class EXPOSE_dm_Sizes_listResult
        {
            public int sizeId { get; set; }
            public string sizeName { get; set; }
        }

        public class EXPOSE_dm_SKUCodes_listResult
        {
            public int Id { get; set; }
            public string SKUcodeName { get; set; }
        }

        public class EXPOSE_dm_Storage_BlockListResult
        {
            public int Id { get; set; }
            public string SKUcodeName { get; set; }
            public string GTIN { get; set; }
            public string ProductName { get; set; }
            public string CategoryName { get; set; }
            public string SizeName { get; set; }
            public int? Amount { get; set; }
        }

        public class EXPOSE_dm_Storage_listResult
        {
            public int Id { get; set; }
            public string GTIN { get; set; }
            public string SKUcodeName { get; set; }
            public int? ProductId { get; set; }
            public string ProductName { get; set; }
            public int? CategoryId { get; set; }
            public string CategoryName { get; set; }
            public int SizeId { get; set; }
            public string SizeName { get; set; }
            public int? Amount { get; set; }
            public int? AmountLeft { get; set; }
        }

        public class EXPOSE_dm_Users_ListResult
        {
            public int UserId { get; set; }
            public string FirstName { get; set; }
            public string LastName { get; set; }
            public string Email { get; set; }
            public string PhoneNumber { get; set; }
            public int? PositionId { get; set; }
            public string PositionName { get; set; }
            public int? RoleId { get; set; }
            public string RoleName { get; set; }
        }

        public class EXPOSE_dm_UsersAccess_ByUserIdResult
        {
            public int UserId { get; set; }
            public bool? Hurt { get; set; }
            public bool? Magazyn { get; set; }
            public bool? Archive { get; set; }
        }

        public class SaveMessageResult
        {
            public int? Col0 { get; set; }
        }

        public class SaveOutgoingMessageResult
        {
            public decimal? Col0 { get; set; }
        }

    }
}